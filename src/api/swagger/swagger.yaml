swagger: "2.0"

info:
  version: "0.0.1"
  title: NodeJS Swagger Base Project

host: pokeapi.moboweb.com.br
basePath: /api/v1dev

schemes:
  - http
  - https

consumes:
  - application/json

produces:
  - application/json

securityDefinitions:
  apiKey:
    type: apiKey
    in: query
    name: apiKey

paths:
  # Partner paths
  /partner:
    x-swagger-router-controller: partner
    post:
      tags:
        - Partner
      security:
        - apiKey: [ ]
      x-security-scopes:
        - USER
        - ADMIN
        - FRANCHISE
      description: Creates a Partner
      operationId: postPartnerCreate
      parameters:
        - in: body
          name: body
          description: Add new Partner to the database
          required: true
          schema:
            $ref: "#/definitions/Partner"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Partner"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - Partner
      security:
        - apiKey: [ ]
      x-security-scopes:
        - USER
        - ADMIN
        - FRANCHISE
      description: Returns the list of all Partner
      operationId: getPartnerList
      parameters:
        - name: page
          in: query
          description: current list pagination position
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PartnerListResponse"
  /partner/{id}:
    x-swagger-router-controller: partner
    get:
      tags:
        - Partner
      security:
        - apiKey: [ ]
      x-security-scopes:
        - USER
        - ADMIN
        - FRANCHISE
      description: Retrieves a specific Partner by id
      operationId: getPartnerById
      parameters:
        - name: id
          in: path
          description: id of Partner
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PartnerResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - Partner
      security:
        - apiKey: [ ]
      x-security-scopes:
        - USER
        - ADMIN
        - FRANCHISE
      description: upsert a Partner by id
      operationId: putPartnerUpsert
      parameters:
        - name: id
          in: path
          description: id of Partner
          required: true
          type: string
        - in: body
          name: body
          description: Partner object data to update
          required: true
          schema:
            $ref: "#/definitions/Partner"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PartnerResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Partner
      security:
        - apiKey: [ ]
      x-security-scopes:
        - USER
        - ADMIN
        - FRANCHISE
      description: delete a specific Partner
      operationId: deletePartnerRemove
      parameters:
        - name: id
          in: path
          description: id of Partner
          required: true
          type: string
      responses:
        204:
          description: No content
        default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"

  # User paths
  /user/authenticate:
    x-swagger-router-controller: user
    post:
      tags:
        - User
      description: Authenticate user
      operationId: postUserAuthenticate
      parameters:
        - in: body
          name: body
          description: Authenticate user with username and password
          required: true
          schema:
            $ref: "#/definitions/UserAuth"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserAuthResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user:
    x-swagger-router-controller: user
    post:
      tags:
        - User
      security:
        - apiKey: [ ]
      x-security-scopes:
        - ADMIN
      description: Creates a user
      operationId: postUserCreate
      parameters:
        - in: body
          name: body
          description: Add new user to the database
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - User
      security:
        - apiKey: [ ]
      x-security-scopes:
        - ADMIN
      description: Returns the list of all users
      operationId: getUserList
      parameters:
        - name: page
          in: query
          description: current list pagination position
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserListResponse"
  /user/{id}:
    x-swagger-router-controller: user
    get:
      tags:
        - User
      security:
        - apiKey: [ ]
      x-security-scopes:
        - USER
        - DOCTOR
        - ADMIN
        - FRANCHISE
      description: Retrieves a specific user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: id of User
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - User
      security:
        - apiKey: [ ]
      x-security-scopes:
        - ADMIN
      description: upsert a user by id
      operationId: putUserUpsert
      parameters:
        - name: id
          in: path
          description: id of User
          required: true
          type: string
        - in: body
          name: body
          description: User object data to update
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - User
      security:
        - apiKey: [ ]
      x-security-scopes:
        - ADMIN
      description: delete a specific user
      operationId: deleteUserRemove
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
      responses:
        204:
          description: No content
        default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"

  #swagger paths
  /swagger:
    x-swagger-pipe: swagger_raw

# Response/Request definitions
definitions:
  # Error definitions
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

  # Partner definitions
  PartnerListResponse:
    title: Partner list response object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Partner"
  PartnerResponse:
    title: Partner response object
    properties:
      data:
        $ref: '#/definitions/Partner'
  Partner:
    title: Partner object model
    type: object
    required:
      - name
      - logo
      - url
    properties:
      name:
        type: string
      logo:
        type: string
      url:
        type: string
      description:
        type: string
      docsInfo:
        type: string
      extra:
        type: string

  # User definitions
  UserListResponse:
    title: User list response object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/User"
  UserResponse:
    title: User response object
    properties:
      data:
        $ref: '#/definitions/User'
  UserAuthResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          token:
            type: string
          rtoken:
            type: string
          role:
            type: string
            enum: ['ADMIN', 'USER', 'FRANCHISE', 'EMPLOYEE', 'DOCTOR']
          name:
            type: string
          lastname:
            type: string
          fullname:
            type: string
          email:
            type: string
          dependents:
            type: array
            items:
              $ref: "#/definitions/User"
  User:
    title: User object model
    type: object
    required:
      - username
      - password
    properties:
      name:
        type: string
      lastname:
        type: string
      fullname:
        type: string
      username:
        type: string
      email:
        type: string
        format: email
      _company:
        type: string
      category:
        type: string
        enum: ['CLIENT', 'COMPANY', 'APP']
      password:
        type: string
      role:
        type: string
        enum: ['ADMIN', 'USER', 'FRANCHISE', 'EMPLOYEE', 'DOCTOR']
  UserAuth:
    title: User informations needed for authentication
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
